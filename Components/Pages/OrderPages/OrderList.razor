@page "/order/list"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IUnitOfWork _unitOfWork
@inject NavigationManager _navigationManager
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card m-4 border-0 shadow">
        <div class="card-header ml-0 py-3" style="background-color: #0d1b2a; color: #ffc300; font-weight: bold; padding: 1rem; font-size: 1.5rem; border-bottom: 2px solid #ffc300; text-align: center;">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            @if (OrderHeaders.Any())
            {
                <table class="table-bordered table-striped table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Phone number</th>
                            <th>Email</th>
                            <th>Order Total</th>
                            <th>Order Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in OrderHeaders)
                        {
                            <tr>
                                <td>
                                    @order.Id
                                </td>
                                <td>
                                    @order.Name
                                </td>
                                <td>
                                    @order.PhoneNumber
                                </td>
                                <td>
                                    @order.Email
                                </td>
                                <td>
                                    @order.OrderTotal.ToString("C")
                                </td>
                                <td>
                                    @order.OrderDate
                                </td>
                                <td>
                                    @order.Status
                                </td>
                                <td>
                                    <div class="text-center">
                                        <a href="@($"order/details/{order.Id}")" class="btn btn-primary">
                                            <i class="bi bi-pencil-square"></i> Details
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();
    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrder();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadOrder()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckIfAuthorized();
        @if (IsAdmin == true)
        {
            OrderHeaders = await _unitOfWork.OrderRepository.GetAllOrdersAsync();
        }
        else
        {
            OrderHeaders = await _unitOfWork.OrderRepository.GetAllOrdersAsync(UserId);
        }


        IsProcessing = false;

    }

    private async Task CheckIfAuthorized()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(Roles.Admin.ToString());
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        };
    }
}
